https://medium.com/@ssnetanel/build-a-kubernetes-cluster-using-k3s-on-proxmox-via-ansible-and-terraform-c97c7974d4a5
https://registry.terraform.io/modules/sdhibit/cloud-init-vm/proxmox/latest/examples/ubuntu_single_vm
https://www.reddit.com/r/Proxmox/comments/1058ko7/installing_tools_into_a_cloudinit_image/
open source software projects (including libvirt, LXD, and vagrant). I
Using cli
sudo apt-get install libguestfs-tools
# mkdir ubuntu_2404_cludimage
# cd ubuntu_2404_cludimage
# wget https://cloud-images.ubuntu.com/minimal/releases/noble/release/ubuntu-24.04-minimal-cloudimg-amd64.img
sudo virt-customize -a ubuntu-24.04-minimal-cloudimg-amd64.img --install qemu-guest-agent (TRY sudo virt-customize -a ubuntu-24.04-minimal-cloudimg-amd64.img --install qemu-guest-agent --run-command 'systemctl enable qemu-guest-agent.service') Also try installing other packages.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --run-command 'useradd simone'
sudo virt-customize -a jammy-server-cloudimg-amd64.img --run-command 'mkdir -p /home/simone/.ssh'
sudo virt-customize -a jammy-server-cloudimg-amd64.img --ssh-inject simone:file:id_ed25519.pub
sudo virt-customize -a jammy-server-cloudimg-amd64.img --run-command 'chown -R simone:simone /home/simone'


scp focal-server-cloudimg-amd64.img Proxmox_username@Proxmox_host:/path_on_Proxmox/focal-server-cloudimg-amd64.img
qm create 9000 --name "ubuntu-24.04-minimal-cloudimg-amd64-template" --memory 2048 --net0 virtio,bridge=vmbr0
mv ubuntu-24.04-minimal-cloudimg-amd64.img ubuntu-24.04-cloudimg-amd64.qcow2
qm importdisk 9000 ubuntu-24.04-cloudimg-amd64.qcow2 local-lvm
qm set 9000 --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-9000-disk-0
qm set 9000 --ide2 local-lvm:cloudinit
qm set 9000 --boot c --bootdisk scsi0
qm set 9000 --serial0 socket --vga serial0
qm set 9000 --agent enabled=1 (TRY this too)
qm template 9000
sudo qm clone 9000 999 --name test-cloud-init
sudo qm set 999 --sshkey ~/.ssh/id_rsa.pub (TRY)
sudo qm set 999 --ipconfig0 ip=10.10.1.20/24,gw=10.10.1.1 (TRY)
sudo qm start 999
ssh ubuntu@10.10.1.1
sudo qm stop 999 && sudo qm destroy 999
rm jammy-server-cloudimg-amd64.img


Think of cloud-init as performing the basic things you need to do before you hand off to your configuration management tool. You can do as much or as little as you need to. This can include setting up login/SSH, usernames, time zones, packages, uploading files, and much more.

setup keys, userid, password, enable qemu, DHCP 
At this point you can edit files using the virt-edit commands found below. Or if you’re savvy you can edit the file which controls all cloud-init which is located at /etc/cloud/cloud.cfg
virt-edit: Edit a file in a virtual machine
root@pve-lab1:~/ubuntu_2404_cludimage# virt-edit --help
virt-edit: Edit a file in a virtual machine
Copyright (C) 2009-2020 Red Hat Inc.
Usage:
  virt-edit [--options] -d domname file [file ...]
  virt-edit [--options] -a disk.img [-a disk.img ...] file [file ...]
Options:
  -a|--add image        Add image
  -b|--backup .ext      Backup original as original.ext
  --blocksize[=512|4096]
                       Set sector size of the disk for -a option
  -c|--connect uri      Specify libvirt URI for -d option
  -d|--domain guest     Add disks from libvirt guest
  --echo-keys           Don't turn off echo for passphrases
  -e|--edit|--expr expr Non-interactive editing using Perl expr
  --format[=raw|..]     Force disk format for -a option
  --help                Display brief help
  --key selector       Specify a LUKS key
  --keys-from-stdin     Read passphrases from stdin
  -m|--mount dev[:mnt[:opts[:fstype]]]
                        Mount dev on mnt (if omitted, /)
  -v|--verbose          Verbose messages
  -V|--version          Display version and exit
  -x                    Trace libguestfs API calls
For more information, see the manpage virt-edit(1).

e.g.
virt-edit -a Rocky-8-GenericCloud-Base.latest.x86_64.qcow2 /etc/cloud/cloud.cfg
virt-install virt-install or virt-manager

Tips for editing cloud.cfg directly:

You can change disable_root to 0 in order to be able to login as root
lock_passwd can be changed to false to allow password based authentication
We can also install packages by adding:
packages:
 - qemu-guest-agent
 - nano
 - wget
 - curl
 - net-tools
Make sure to edit the /etc/ssh/sshd_config file to allow password authentication as well if desired. This can be done using the same virt-edit command above.
PermitRootLogin yes
PasswordAuthentication yes

JUST WAW
https://sysblob.com/posts/cloud-init/

Proxmox: Create a ubuntu 22.04 template using cloud image, for creating ubuntu machines in few seconds.
     add ssh keys, to enable passwordless login
     and configure default userid and password through cloud.init

========================================================================================
References: 
https://www.youtube.com/watch?v=MJgIm03Jxdo
https://cloud-images.ubuntu.com/minimal/releases/jammy/release/
========================================================================================


Got to proxmox gui -> 192.168.1.xxx:8006
Create new VM -> vm id =900, name =ubuntu-2404-template, Dont use any media (as we are going to use cloud image), select QEMU agent (it will work if installed) to enable it, delete scsi0 disk as we will create and add it later, selct sockets/cores, memory 1024, continue with vmbr0, 
select this 900 VM (Proxmon GUI)-> go to Hardware Tab -> add cloudinit drive - > select local-lvm.
                              go to cloud-init tab - > set userid=artia, password=xxxx, ssh key= public key, IPconfig (network) =DHCP

download cloud image, .img file (QCow2 UEFI/GPT Bootable disk image) on pve terminal / console
====================================
# mkdir ubuntu_2404_cludimage
# cd ubuntu_2404_cludimage
# wget https://cloud-images.ubuntu.com/minimal/releases/noble/release/ubuntu-24.04-minimal-cloudimg-amd64.img

create a vga console
# qm set 900 --serial0 socket --vga serial0
# mv ubuntu-24.04-minimal-cloudimg-amd64.img ubuntu-24.04.qcow2
# qemu-img resize ubuntu-24.04.qcow2 32G
# qm importdisk 900 ubuntu-24.04.qcow2 local-lvm
Successfully imported disk as 'unused0:local-lvm:vm-900-disk-0'

goto Proxmox GUI -> select ubuntu-2404-template -> goto Hardware -> Unused Disk 0-> Edit -> Add. This will start showing in Hard Disk (scsi0).
goto Proxmox GUI -> select ubuntu-2404-template -> goto options -> boot order -> select newly added disk and move it to 2nd in order. select 'start at boot' as 'Yes'
goto Proxmox GUI -> select ubuntu-2404-template -> convert to template


## Create a new VM from Template
goto Proxmox GUI -> select 900 (ubuntu-2404-template) -> 'clone' -> 799 as VM ID, Mode as 'Full Flone', let machine build, login with userid

Review details in newly created VM be going through below VMs, you will notice IP is not allocated / shown up in display.
Cloud-Init -> you will see user is already created, with given user id and password. and also ssh public key (to login into this)
Summary ->  IPs - Guest Agent not running
Console -> Start Now -> login into newly created machine using console userid/password (sometimes proxmox stuck at console, press 'enter' to get into it.) 
Observe commands on screen you will notice cloud-init is already installed, configuring your server Also and you can see config in /etc/cloud-init
sudo apt list | grep 'cloud-init'
ls ~/.ssh (to see ssh file)
ip addr (to get IP)
sudo reboot now
sudo apt update -y && sudo apt upgrade -y
$ dpkg --get-selections | grep cloud-init
sudo apt install cloud-init

---------------------------------------------------------------------------
install qemu-guest-agent
$ apt install qemu-guest-agent
$ systemctl status qemu-guest-agent
● qemu-guest-agent.service - QEMU Guest Agent
     Loaded: loaded (/lib/systemd/system/qemu-guest-agent.service; static)
     Active: active (running) since Wed 2024-05-15 21:32:18 UTC; 1min 59s ago
   Main PID: 259 (qemu-ga)
      Tasks: 2 (limit: 2385)
     Memory: 1.1M
        CPU: 78ms
     CGroup: /system.slice/qemu-guest-agent.service
             └─259 /usr/sbin/qemu-ga

$ sudo reboot -h now


May 15 21:32:18 ubuntu-799-2404 systemd[1]: Started QEMU Guest Agent will be start, check status. 
$ Qemu agent will be useful in add additional context menu like reboot, sleep etc. for server. to have better interactions between with proxmox GUI and VM linux
Also system will show IP address at this time to be connected using ssh keys, pass in cloud-init.

use ssh given in cloud-int, to connect to this machine using ssh




we will use ansible for basic installtions, 
sudo apt install ansible -y

